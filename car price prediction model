import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Generating synthetic data
np.random.seed(0)
data_size = 1000
data = {
    'age': np.random.randint(1, 20, data_size),
    'mileage': np.random.randint(5000, 200000, data_size),
    'brand': np.random.choice(['Toyota', 'Ford', 'BMW', 'Audi', 'Mercedes'], data_size),
    'price': np.random.randint(5000, 50000, data_size)
}

df = pd.DataFrame(data)

# Encoding categorical features
df = pd.get_dummies(df, columns=['brand'], drop_first=True)

# Splitting data into features and labels
X = df.drop('price', axis=1)
y = df['price']

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Preprocessing the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Training the model
model = LinearRegression()
model.fit(X_train, y_train)

# Evaluating the model
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R^2 Score: {r2}")

# Visualizing the results
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted Prices")
plt.show()
